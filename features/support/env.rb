# frozen_string_literal: true

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'
include Warden::Test::Helpers
# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise 'You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.'
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#
#
require 'simplecov'
SimpleCov.start 'rails'

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature

Cucumber::Rails::Database.javascript_strategy = :truncation

# Capybara.default_host = 'http://example.org'

# if ENV['WEBKIT']
#   Capybara.javascript_driver = :webkit
#   Capybara::Webkit.configure(&:allow_unknown_urls)
# elsif ENV['FIREFOX']
#   require 'selenium-webdriver'
#   profile = Selenium::WebDriver::Firefox::Profile.new
#   profile['browser.download.folderList'] = 2
#   profile['browser.download.dir'] = '/tmp'
#   profile['browser.helperApps.neverAsk.saveToDisk'] = 'application/pdf, audio/mpeg, text/csv'
#   # disable Firefox's built-in PDF viewer
#   profile['pdfjs.disabled'] = true
#   # disable Adobe Acrobat PDF preview plugin
#   profile['plugin.scan.plid.all'] = false
#   profile['plugin.scan.Acrobat'] = '99.0'
#   Capybara.register_driver :selenium do |app|
#     Capybara::Selenium::Driver.new(app, browser: :firefox, profile: profile)
#   end
# else
#   Capybara.register_driver :selenium do |app|
#     Capybara::Selenium::Driver.new(app, browser: :chrome)
#   end
#   # Capybara.javascript_driver = :selenium
#   Capybara.register_driver :headless_chrome do |app|
#     capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
#       chromeOptions: { args: %w[headless disable-gpu] }
#     )

#     Capybara::Selenium::Driver.new app,
#                                    browser: :chrome,
#                                    desired_capabilities: capabilities
#   end

#   Capybara.javascript_driver = :headless_chrome
# end
# Capybara.server_port = '3001'

require 'webrick'
