var CACHE_VERSION = "v1";
var CACHE_NAME = CACHE_VERSION + ":sw-cache-";

function onInstall(event) {
  console.log("[Serviceworker]", "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      console.log(cache)
      return cache.addAll([
          "/offline.html",
          "clickx-logo-reverse.png"
      ]);
    })
  );
}

function onActivate(event) {
  console.log("[Serviceworker]", "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames
          .filter(function(cacheName) {
            // Return true if you want to remove this cache,
            // but remember that caches are shared across
            // the whole origin
            return cacheName.indexOf(CACHE_VERSION) !== 0;
          })
          .map(function(cacheName) {
            return caches.delete(cacheName);
          })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (
          event.request.mode === "navigate" ||
          (event.request.method === "GET" &&
            event.request.headers.get("accept").includes("text/html"))
        ) {
          console.log("[Serviceworker]", "Fetching offline content", event);
          return caches.match("/offline.html");
        }
      });
    })
  );
}

function onPush(event) {
  var title = "Clickx";
  try {
    json = event.data.json();
    body = json.body;
    url = json.url;
    title = json.title || title;
  } catch (error) {
    body = event.data.text();
    url = "";
  }
  var body = body || "Yay a message";
  event.waitUntil(
    self.registration.showNotification(title, {
      body: body,
      data: { url: url },
      icon: "/clickx_logo_orange.png",
      tag: "clckx-notification"
    })
  );
}

function onNotificationClick(event) {
  // Android doesn't close the notification when you click on it
  // See: http://crbug.com/463146
  event.notification.close();

  // This looks to see if the current is already open and
  // focuses if it is
  if (event.notification.data.url) {
    url = event.notification.data.url;
    event.waitUntil(
      clients
        .matchAll({
          type: "window"
        })
        .then(function(clientList) {
          for (var i = 0; i < clientList.length; i++) {
            var client = clientList[i];
            if (client.url == url && "focus" in client) return client.focus();
          }
          if (clients.openWindow) {
            return clients.openWindow(url);
          }
        })
    );
  }
}

self.addEventListener("push", onPush);
self.addEventListener("notificationclick", onNotificationClick);
self.addEventListener("install", onInstall);
self.addEventListener("activate", onActivate);
self.addEventListener("fetch", onFetch);
